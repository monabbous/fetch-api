{"version":3,"sources":["fetch-api.ts","fetch-api.cdn.ts"],"names":[],"mappings":"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","file":"fetch-api.cdn.js","sourceRoot":"../src","sourcesContent":["import {ArrayBufferRequest, BlobRequest, JSONRequest, Request, TextRequest} from \"./interfaces/requests.interface\";\n\ninterface ServerVersions {\n    [key: string]: string;\n}\n\ninterface Server {\n    baseUrl: string;\n    versions: ServerVersions;\n    defaultVersion: keyof ServerVersions;\n}\n\nexport interface Servers {\n    [key: string]: Server;\n}\n\nexport class FetchApi {\n\n    public static servers: Servers = {};\n    public static defaultServer: string = '';\n    public static readonly interceptors: {\n        request?(request: Request, next: (request: Request) => Promise<any | string | Blob | ArrayBuffer>): Promise<Response | any>\n        response?(response: Response, request: Request, next: (response: Response) => Promise<any | string | Blob | ArrayBuffer>): Promise<Response | any>\n    } = {};\n\n    public static getFullUrl(server, version): string {\n        server = FetchApi.handleServer(server);\n        version = FetchApi.handleServerVersion(server, version);\n        return FetchApi.servers[server]?.baseUrl + FetchApi.servers[server]?.versions[version];\n    }\n\n\n    protected static handleServer(server): string {\n        if (Object.keys(FetchApi.servers).indexOf(server) === -1) {\n            console.warn(`Ng Api Wrapper: Server '${server}' is not in the configuration, will use the defaultServer`);\n            server = FetchApi.defaultServer;\n        }\n        return server;\n    }\n\n    protected static handleServerVersion(server, version): string {\n        if (Object.keys(FetchApi.servers[server].versions).indexOf(version) === -1) {\n            console.warn(`Ng Api Wrapper: Server '${server}' Api version '${version}' is not in the configuration, will use the defaultVersion`);\n            version = FetchApi.servers[server]?.defaultVersion;\n        }\n        return version;\n    }\n\n    public static request<T extends string = string>(request: TextRequest): Promise<T>;\n    public static request<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static request<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static request<T = any>(request: JSONRequest): Promise<T>;\n    public static async request<T = any>(request: Request) {\n        request.baseUrl = FetchApi.getFullUrl(request.server, request.version);\n        request.observe = request.observe || 'body';\n        request.responseType = request.responseType || 'json';\n\n        const next = (r: Request) => {\n            request = r;\n            if (request.server !== request.server && request.version !== request.version) {\n                request.baseUrl = FetchApi.getFullUrl(request.server, request.version);\n            }\n            return fetch(request.baseUrl + request.path, request);\n        };\n\n        const nextResponse = async (res) => {\n            if (request.observe === \"body\" && res instanceof Response) {\n                switch (request.responseType) {\n                    case \"text\":\n                        res = (await res.text());\n                        break;\n                    case \"json\":\n                        res = (await res.json()) as T;\n                        break;\n                    case \"blob\":\n                        res = (await res.blob());\n                        break;\n                    case \"arraybuffer\":\n                        res = (await res.arrayBuffer());\n                        break;\n                }\n\n                if ((res as Response).status >= 300) {\n                    throw res;\n                }\n                return res;\n            }\n            return res;\n        }\n\n\n        try {\n            const response = await (FetchApi.interceptors.request ? FetchApi.interceptors.request(request, next) : next(request));\n            return await (FetchApi.interceptors.response ? FetchApi.interceptors.response(response, request, nextResponse) : nextResponse(response));\n        } catch (error) {\n            throw await (FetchApi.interceptors.response ? FetchApi.interceptors.response(error, request, nextResponse) : nextResponse(error));\n        }\n    }\n\n    public static get<T extends string = string>(request: TextRequest): Promise<T>;\n    public static get<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static get<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static get<T = any>(request: JSONRequest): Promise<T>;\n    public static get<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'GET'} as Request);\n    }\n\n    public static post<T extends string = string>(request: TextRequest): Promise<T>;\n    public static post<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static post<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static post<T = any>(request: JSONRequest): Promise<T>;\n    public static post<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'POST'} as Request);\n    }\n\n    public static put<T extends string = string>(request: TextRequest): Promise<T>;\n    public static put<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static put<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static put<T = any>(request: JSONRequest): Promise<T>;\n    public static put<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'PUT'} as Request);\n    }\n\n    public static patch<T extends string = string>(request: TextRequest): Promise<T>;\n    public static patch<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static patch<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static patch<T = any>(request: JSONRequest): Promise<T>;\n    public static patch<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'PATCH'} as Request);\n    }\n\n    public static delete<T extends string = string>(request: TextRequest): Promise<T>;\n    public static delete<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static delete<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static delete<T = any>(request: JSONRequest): Promise<T>;\n    public static delete<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'DELETE'} as Request);\n    }\n\n}\n","import {FetchApi} from \"./fetch-api\";\n\n\n// @ts-ignore\nwindow.FetchApi = FetchApi;\n"]}