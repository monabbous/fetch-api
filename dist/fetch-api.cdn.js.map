{"version":3,"sources":["fetch-api.ts","fetch-api.cdn.ts"],"names":[],"mappings":"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","file":"fetch-api.cdn.js","sourceRoot":"../src","sourcesContent":["import {\n    ArrayBufferRequest,\n    BlobRequest, DefaultRequest,\n    JSONRequest,\n    Request,\n    TextRequest\n} from \"./interfaces/requests.interface\";\n\ninterface ServerVersions {\n    [key: string]: string;\n}\n\ninterface Server {\n    baseUrl: string;\n    versions: ServerVersions;\n    defaultVersion: keyof ServerVersions;\n}\n\nexport interface Servers {\n    [key: string]: Server;\n}\n\n\nconst flattenObject = (object) => {\n    const f = (o, acc, keys) => {\n        return Object.entries(o).reduce((a, [k, value]) => {\n            let key = [...keys, k];\n            if (typeof value === 'object') {\n                f(value, a, key);\n            } else {\n                a[key.reduce((a, b) => `${a}[${b}]`)] = value;\n            }\n            return a;\n        }, acc);\n    }\n\n    return f(object, {}, []);\n}\n\nexport class FetchApi {\n\n    public static servers: Servers = {};\n    public static defaultServer: string = '';\n    public static readonly interceptors: {\n        request?(request: Request, next: (request: Request) => Promise<any | string | Blob | ArrayBuffer>): Promise<Response | any>\n        response?(response: Response, request: Request, next: (response: Response) => Promise<any | string | Blob | ArrayBuffer>): Promise<Response | any>\n    } = {};\n\n    public static getFullUrl(server, version): string {\n        server = FetchApi.handleServer(server);\n        version = FetchApi.handleServerVersion(server, version);\n        return FetchApi.servers[server]?.baseUrl + FetchApi.servers[server]?.versions[version];\n    }\n\n\n    protected static handleServer(server): string {\n        if (Object.keys(FetchApi.servers).indexOf(server) === -1) {\n            if (server !== undefined) {\n                console.warn(`Ng Api Wrapper: Server '${server}' is not in the configuration, will use the defaultServer`);\n            }\n            server = FetchApi.defaultServer;\n        }\n        return server;\n    }\n\n    protected static handleServerVersion(server, version): string {\n        if (Object.keys(FetchApi.servers[server].versions).indexOf(version) === -1) {\n            if (version !== undefined) {\n                console.warn(`Ng Api Wrapper: Server '${server}' Api version '${version}' is not in the configuration, will use the defaultVersion`);\n            }\n            version = FetchApi.servers[server]?.defaultVersion;\n        }\n        return version;\n    }\n\n    public static request(request: DefaultRequest): Promise<Response>;\n    public static request<T extends string = string>(request: TextRequest): Promise<T>;\n    public static request<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static request<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static request<T = unknown>(request: JSONRequest): Promise<T>;\n    public static async request<T = any>(request: Request) {\n        if (request.outsource !== true) {\n            request.baseUrl = FetchApi.getFullUrl(request.server, request.version);\n        }\n        request.observe = request.observe || 'body';\n        request.responseType = request.responseType || 'json';\n        let hasError = false;\n\n        const next = (r: Request) => {\n            request = r;\n            request.headers = new Headers(request.headers);\n            let url: URL;\n            if (request.outsource !== true) {\n                if (request.server !== request.server && request.version !== request.version) {\n                    request.baseUrl = FetchApi.getFullUrl(request.server, request.version);\n                }\n                url = new URL(request.baseUrl + request.path);\n            } else {\n                url = new URL(request.path);\n            }\n\n            if (request.method === 'GET' && (request.body instanceof URLSearchParams || request.body instanceof Object)) {\n                const params = new URLSearchParams(request.body instanceof URLSearchParams ? request.body : Object.entries(flattenObject(request.body)));\n                delete request.body;\n                params.forEach((v, k) => url.searchParams.append(k, v));\n            } else {\n                if (\n                    !(request.body instanceof Blob ||\n                        request.body instanceof FormData ||\n                        request.body instanceof ArrayBuffer ||\n                        request.body instanceof URLSearchParams ||\n                        request.body instanceof ReadableStream ||\n                        request.body instanceof String)\n                    && ['application/json', '', undefined].includes(request.headers.get('Content-Type'))) {\n                    request.headers.set('Content-Type', 'application/json');\n                    // @ts-ignore\n                    if (request.flatten) {\n                        request.body = flattenObject(request.body);\n                    }\n                } else if (request.body instanceof FormData) {\n                    request.headers.set('Content-Type', 'multipart/form-data');\n                }\n            }\n            return fetch(url.toString(), request);\n        };\n\n        const nextResponse = async (res) => {\n            if (request.observe === \"body\" && res instanceof Response) {\n                let body: any = res.body;\n                switch (request.responseType) {\n                    case \"text\":\n                        body = (await res.text()) as (T | String);\n                        break;\n                    case \"json\":\n                        body = (await res.json()) as (T | Object);\n                        break;\n                    case \"blob\":\n                        body = (await res.blob()) as (T | Blob);\n                        break;\n                    case \"arraybuffer\":\n                        body = (await res.arrayBuffer()) as (T | ArrayBuffer);\n                        break;\n                }\n\n                if (hasError) {\n                    throw body;\n                }\n                return body;\n            } else if (res.observe === \"response\" && res instanceof Response) {\n                if (hasError) {\n                    return res as Response;\n                } else {\n                    throw res as Response;\n                }\n            }\n            if (hasError) {\n                return res;\n            } else {\n                throw res;\n            }\n        }\n\n\n        try {\n            const response = await (FetchApi.interceptors.request ? FetchApi.interceptors.request(request, next) : next(request));\n            return await (FetchApi.interceptors.response ? FetchApi.interceptors.response(response, request, nextResponse) : nextResponse(response));\n        } catch (error) {\n            hasError = true;\n            throw await (FetchApi.interceptors.response ? FetchApi.interceptors.response(error, request, nextResponse) : nextResponse(error));\n        }\n    }\n\n    public static get(request: DefaultRequest): Promise<Response>;\n    public static get<T extends string = string>(request: TextRequest): Promise<T>;\n    public static get<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static get<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static get<T = any>(request: JSONRequest): Promise<T>;\n    public static get<T = unknown>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'GET'} as Request);\n    }\n\n    public static post(request: DefaultRequest): Promise<Response>;\n    public static post<T extends string = string>(request: TextRequest): Promise<T>;\n    public static post<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static post<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static post<T = any>(request: JSONRequest): Promise<T>;\n    public static post<T = unknown>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'POST'} as Request);\n    }\n\n    public static put(request: DefaultRequest): Promise<Response>;\n    public static put<T extends string = string>(request: TextRequest): Promise<T>;\n    public static put<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static put<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static put<T = any>(request: JSONRequest): Promise<T>;\n    public static put<T = unknown>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'PUT'} as Request);\n    }\n\n    public static patch(request: DefaultRequest): Promise<Response>;\n    public static patch<T extends string = string>(request: TextRequest): Promise<T>;\n    public static patch<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static patch<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static patch<T = any>(request: JSONRequest): Promise<T>;\n    public static patch<T = unknown>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'PATCH'} as Request);\n    }\n\n    public static delete(request: DefaultRequest): Promise<Response>;\n    public static delete<T extends string = string>(request: TextRequest): Promise<T>;\n    public static delete<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static delete<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static delete<T = any>(request: JSONRequest): Promise<T>;\n    public static delete<T = unknown>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'DELETE'} as Request);\n    }\n\n}\n","import {FetchApi} from \"./fetch-api\";\n\n\n// @ts-ignore\nwindow.FetchApi = FetchApi;\n"]}