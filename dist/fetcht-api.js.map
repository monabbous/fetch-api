{"version":3,"file":"fetcht-api.js","sourceRoot":"","sources":["../src/fetcht-api.ts"],"names":[],"mappings":"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","sourcesContent":["import {ArrayBufferRequest, BlobRequest, JSONRequest, Request, TextRequest} from \"./interfaces/requests.interface\";\n\ninterface ServerVersions {\n    [key: string]: string;\n}\n\ninterface Server {\n    baseUrl: string;\n    versions: ServerVersions;\n    defaultVersion: keyof ServerVersions;\n}\n\nexport interface Servers {\n    [key: string]: Server;\n}\n\nexport class FetchApi {\n\n    public static servers: Servers = {};\n    public static defaultServer: string = '';\n    public static readonly interceptors: {\n        request?(request: Request, next: (Request) => Promise<any | string | Blob | ArrayBuffer>): Promise<Request>\n    } = {};\n\n    public static getFullUrl(server, version): string {\n        server = FetchApi.handleServer(server);\n        version = FetchApi.handleServerVersion(server, version);\n        return FetchApi.servers[server]?.baseUrl + FetchApi.servers[server]?.versions[version];\n    }\n\n\n    protected static handleServer(server): string {\n        if (Object.keys(FetchApi.servers).indexOf(server) === -1) {\n            console.warn(`Ng Api Wrapper: Server '${server}' is not in the configuration, will use the defaultServer`);\n            server = FetchApi.defaultServer;\n        }\n        return server;\n    }\n\n    protected static handleServerVersion(server, version): string {\n        if (Object.keys(FetchApi.servers[server].versions).indexOf(version) === -1) {\n            console.warn(`Ng Api Wrapper: Server '${server}' Api version '${version}' is not in the configuration, will use the defaultVersion`);\n            version = FetchApi.servers[server]?.defaultVersion;\n        }\n        return version;\n    }\n\n    public static request<T extends string = string>(request: TextRequest): Promise<T>;\n    public static request<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static request<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static request<T = any>(request: JSONRequest): Promise<T>;\n    public static request<T = any>(request: Request) {\n        request.baseUrl = FetchApi.getFullUrl(request.server, request.version);\n        request.observe = request.observe || 'body';\n        request.responseType = request.responseType || 'json';\n\n        const next = (r: Request) => {\n            if (r.server !== request.server && r.version !== request.version) {\n                r.baseUrl = FetchApi.getFullUrl(r.server, r.version);\n            }\n            return fetch(r.baseUrl + r.path, r)\n                .then(async response => {\n                    if (r.observe === \"body\") {\n                        switch (r.responseType) {\n                            case \"text\":\n                                return (await response.text());\n                            case \"json\":\n                                return (await response.json()) as T;\n                            case \"blob\":\n                                return (await response.blob());\n                            case \"arraybuffer\":\n                                return (await response.arrayBuffer());\n                        }\n                    }\n                });\n        };\n        return FetchApi.interceptors.request ? FetchApi.interceptors.request(request, next) : next(request);\n    }\n\n    public static get<T extends string = string>(request: TextRequest): Promise<T>;\n    public static get<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static get<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static get<T = any>(request: JSONRequest): Promise<T>;\n    public static get<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'GET'} as Request);\n    }\n\n    public static post<T extends string = string>(request: TextRequest): Promise<T>;\n    public static post<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static post<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static post<T = any>(request: JSONRequest): Promise<T>;\n    public static post<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'POST'} as Request);\n    }\n\n    public static put<T extends string = string>(request: TextRequest): Promise<T>;\n    public static put<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static put<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static put<T = any>(request: JSONRequest): Promise<T>;\n    public static put<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'PUT'} as Request);\n    }\n\n    public static patch<T extends string = string>(request: TextRequest): Promise<T>;\n    public static patch<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static patch<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static patch<T = any>(request: JSONRequest): Promise<T>;\n    public static patch<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'PATCH'} as Request);\n    }\n\n    public static delete<T extends string = string>(request: TextRequest): Promise<T>;\n    public static delete<T extends Blob = Blob>(request: BlobRequest): Promise<T>;\n    public static delete<T extends ArrayBuffer = ArrayBuffer>(request: ArrayBufferRequest): Promise<T>;\n    public static delete<T = any>(request: JSONRequest): Promise<T>;\n    public static delete<T = any>(request: Request) {\n        // @ts-ignore\n        return FetchApi.request<T>({...request, method: 'DELETE'} as Request);\n    }\n\n}\n"]}